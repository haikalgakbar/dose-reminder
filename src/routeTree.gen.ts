/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const HistoryLazyImport = createFileRoute('/history')()
const IndexLazyImport = createFileRoute('/')()
const MedicineIndexLazyImport = createFileRoute('/medicine/')()
const MedicineMedicineIdLazyImport = createFileRoute('/medicine/$medicineId')()

// Create/Update Routes

const HistoryLazyRoute = HistoryLazyImport.update({
  path: '/history',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/history.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const MedicineIndexLazyRoute = MedicineIndexLazyImport.update({
  path: '/medicine/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/medicine/index.lazy').then((d) => d.Route),
)

const MedicineMedicineIdLazyRoute = MedicineMedicineIdLazyImport.update({
  path: '/medicine/$medicineId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/medicine/$medicineId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/history': {
      id: '/history'
      path: '/history'
      fullPath: '/history'
      preLoaderRoute: typeof HistoryLazyImport
      parentRoute: typeof rootRoute
    }
    '/medicine/$medicineId': {
      id: '/medicine/$medicineId'
      path: '/medicine/$medicineId'
      fullPath: '/medicine/$medicineId'
      preLoaderRoute: typeof MedicineMedicineIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/medicine/': {
      id: '/medicine/'
      path: '/medicine'
      fullPath: '/medicine'
      preLoaderRoute: typeof MedicineIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/history': typeof HistoryLazyRoute
  '/medicine/$medicineId': typeof MedicineMedicineIdLazyRoute
  '/medicine': typeof MedicineIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/history': typeof HistoryLazyRoute
  '/medicine/$medicineId': typeof MedicineMedicineIdLazyRoute
  '/medicine': typeof MedicineIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/history': typeof HistoryLazyRoute
  '/medicine/$medicineId': typeof MedicineMedicineIdLazyRoute
  '/medicine/': typeof MedicineIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/history' | '/medicine/$medicineId' | '/medicine'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/history' | '/medicine/$medicineId' | '/medicine'
  id: '__root__' | '/' | '/history' | '/medicine/$medicineId' | '/medicine/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  HistoryLazyRoute: typeof HistoryLazyRoute
  MedicineMedicineIdLazyRoute: typeof MedicineMedicineIdLazyRoute
  MedicineIndexLazyRoute: typeof MedicineIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  HistoryLazyRoute: HistoryLazyRoute,
  MedicineMedicineIdLazyRoute: MedicineMedicineIdLazyRoute,
  MedicineIndexLazyRoute: MedicineIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/history",
        "/medicine/$medicineId",
        "/medicine/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/history": {
      "filePath": "history.lazy.tsx"
    },
    "/medicine/$medicineId": {
      "filePath": "medicine/$medicineId.lazy.tsx"
    },
    "/medicine/": {
      "filePath": "medicine/index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
